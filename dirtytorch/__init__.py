from os import path
from typing import Optional, Union
from dataclasses import dataclass
from pprint import pprint


def init_mlflow_logger(*args, tracking_uri=None, **kwargs):
    from pytorch_lightning import loggers
    import mlflow
    logger = loggers.MLFlowLogger(*args, **kwargs, tracking_uri=tracking_uri)
    mlflow.set_tracking_uri(tracking_uri)
    return logger


@dataclass
class Snippet:
    file: str
    description: str


thisdir = path.dirname(__file__)

snippets = {
    "shape-modules": Snippet(
        file="nn/reshape.py",
        description="""\
        Provide Reshape and Permute layer as torch.nn modules
        """.strip()),
    "model-patcher": Snippet(
        file="model_patcher.py",
        description="""\
        Patching pytorch modules
        """.strip())
}


def list_snippets():
    pprint(snippets)
    return snippets


def get_snippet(name, output_file: Optional[Union[bool, str]] = None):
    file = path.join(thisdir, snippets[name].file)

    with open(file, encoding="utf-8") as f:
        content = f.read()
        content = "\n".join([
            "# Generated by dirtytorch",
            content
        ])

    if output_file is True:
        output_file = path.basename(file)

    if output_file is not None:
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(content)
    return content
