{
  "video_utils": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "video_utils.py",
    "name": "video_utils"
  },
  "retinaface_utils": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "retinaface_utils.py",
    "name": "retinaface_utils"
  },
  "init_this_dir": {
    "short_desc": "No short description provided",
    "description": "Warning\n- this module is hacky and use ugly exec code\n- this module is slow because of the exec\n- this module should should not be used in production",
    "depends": [],
    "file": "init_this_dir.py",
    "name": "init_this_dir"
  },
  "tripletstuffs": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "tripletstuffs.py",
    "name": "tripletstuffs"
  },
  "train_utils": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "train_utils.py",
    "name": "train_utils"
  },
  "pl.loggers": {
    "short_desc": "pytorch lightning customer loggers",
    "description": "Usage is the same as offical ones\nThis module's main functions are:\n- ConsoleLogger\n- MLFlowLogger (returns MLFlowLogger and set other settings for mlflow)",
    "depends": [],
    "file": "pl/loggers.py",
    "name": "pl.loggers"
  },
  "pl.callbacks": {
    "short_desc": "Custom lightning callbacks",
    "description": "No description provided",
    "depends": [],
    "file": "pl/callbacks.py",
    "name": "pl.callbacks"
  },
  "nn.patcher": {
    "short_desc": "patching pytorch models",
    "description": "No description provided",
    "depends": [],
    "file": "nn/patcher.py",
    "name": "nn.patcher"
  },
  "nn.indexed_image_folder": {
    "short_desc": "IndexedImageFolder, image folder with annotation index file",
    "description": "No description provided",
    "depends": [],
    "file": "nn/indexed_image_folder.py",
    "name": "nn.indexed_image_folder"
  },
  "nn.pickle-dataset": {
    "short_desc": "dataset with single pickle file, fast and easy to move arround",
    "description": "No description provided",
    "depends": [],
    "file": "nn/pickle-dataset.py",
    "name": "nn.pickle-dataset"
  },
  "nn.reshape": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "nn/reshape.py",
    "name": "nn.reshape"
  },
  "nn.balanced_bce_losses": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "nn/balanced_bce_losses.py",
    "name": "nn.balanced_bce_losses"
  },
  "utils.read": {
    "short_desc": "unified `read` function, to be updated with formats",
    "description": "No description provided",
    "depends": [],
    "file": "utils/read.py",
    "name": "utils.read"
  },
  "utils.find": {
    "short_desc": "unix-like find(root, name=\"*\", type, walk, cases)",
    "description": "usage:\nfind(root, name=\"glob*\", type=(\"d\"|\"f\"), walk=True, cases=True)",
    "depends": [],
    "file": "utils/find.py",
    "name": "utils.find"
  },
  "utils.autoname": {
    "short_desc": "auto name from configuration",
    "description": "No description provided",
    "depends": [],
    "file": "utils/autoname.py",
    "name": "utils.autoname"
  },
  "utils.polygon": {
    "short_desc": "calculate offset polygon",
    "description": "No description provided",
    "depends": [],
    "file": "utils/polygon.py",
    "name": "utils.polygon"
  },
  "utils.dict": {
    "short_desc": "Helpers for dict's (merge_dict, AttrDict)",
    "description": "No description provided",
    "depends": [],
    "file": "utils/dict.py",
    "name": "utils.dict"
  },
  "utils.stats": {
    "short_desc": "helper for calculating score and time, etc...",
    "description": "No description provided",
    "depends": [],
    "file": "utils/stats.py",
    "name": "utils.stats"
  },
  "utils.tree": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "utils/tree.py",
    "name": "utils.tree"
  },
  "utils.mask_to_polygon": {
    "short_desc": "mask to polygon",
    "description": "No description provided",
    "depends": [],
    "file": "utils/mask_to_polygon.py",
    "name": "utils.mask_to_polygon"
  },
  "utils.with-config": {
    "short_desc": "@with_config decorator for convoluted model configuration",
    "description": "Usage:\n@with_config(path='module1')\nclass Module1:\ndef __init__(self, size: int):\n...\n@with_config(path='module2')\nclass Module2:\ndef __init__(self, size: int):\n...\nconfig = read_config(...)\nModule1.from_config(config)\nModule2.from_config(config)",
    "depends": [],
    "file": "utils/with-config.py",
    "name": "utils.with-config"
  },
  "utils.functable": {
    "short_desc": "Nice Dict[K, Callable] wrapper",
    "description": "Sample usage:\ndispatch = Functable()\ndispatch.register(\"action1\", action1)\n@dispatch.register(\"action2\")\ndef action2(...):\n...",
    "depends": [],
    "file": "utils/functable.py",
    "name": "utils.functable"
  },
  "minigym.config": {
    "short_desc": "Utilities for organizing config in a experiment repository",
    "description": "No description provided",
    "depends": [],
    "file": "minigym/config.py",
    "name": "minigym.config"
  },
  "scripts.split_image_folder": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "scripts/split_image_folder.py",
    "name": "scripts.split_image_folder"
  },
  "scripts.enterdev": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "scripts/enterdev.py",
    "name": "scripts.enterdev"
  },
  "scripts.splitfile": {
    "short_desc": "No short description provided",
    "description": "No description provided",
    "depends": [],
    "file": "scripts/splitfile.py",
    "name": "scripts.splitfile"
  },
  "onnx.ctc_classifier": {
    "short_desc": "easy CTCClassifier with onnx runtime",
    "description": "No description provided",
    "depends": [],
    "file": "onnx/ctc_classifier.py",
    "name": "onnx.ctc_classifier"
  },
  "onnx.classifier": {
    "short_desc": "generic classifier",
    "description": "No description provided",
    "depends": [],
    "file": "onnx/classifier.py",
    "name": "onnx.classifier"
  }
}